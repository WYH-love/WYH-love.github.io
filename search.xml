<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图床教程2</title>
      <link href="/Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B2/"/>
      <url>/Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B2/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#1-%E4%BD%BF%E7%94%A8typora%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E6%96%B9%E6%B3%95">1. 使用Typora自动添加相对路径的方法</a></li><li><a href="#2github%E5%9B%BE%E5%BA%8Avercel%E9%83%A8%E7%BD%B2picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">2.Github图床+Vercel部署+PicGo上传图片</a><ul><li><a href="#21-%E5%BB%BA%E7%AB%8Bgithub%E4%BB%93%E5%BA%93">2.1 建立Github仓库</a></li><li><a href="#22-vercel%E9%83%A8%E7%BD%B2">2.2 Vercel部署</a></li><li><a href="#23-%E8%B4%AD%E4%B9%B0%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E5%B9%B6%E9%80%9A%E8%BF%87vercel%E5%B0%86%E5%9F%9F%E5%90%8D%E5%92%8Cgithub%E4%BB%93%E5%BA%93%E7%BB%91%E5%AE%9A">2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定</a></li><li><a href="#24-picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">2.4 PicGo上传图片</a></li><li><a href="#25-picgo%E7%BB%93%E5%90%88typora%E4%BD%BF%E7%94%A8">2.5 PicGo结合Typora使用</a></li></ul></li><li><a href="#3%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8Apicgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">3.七牛云图床+PicGo上传图片</a><ul><li><a href="#31-%E5%88%9B%E5%BB%BA%E4%B8%83%E7%89%9B%E4%BA%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4">3.1 创建七牛云的存储空间</a></li><li><a href="#32-%E5%AF%B9%E4%B8%83%E7%89%9B%E4%BA%91%E6%89%80%E5%88%9B%E5%BB%BA%E7%9A%84%E5%9F%9F%E5%90%8D%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90">3.2 对七牛云所创建的域名进行解析</a></li><li><a href="#33-picgo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">3.3 PicGo上传图片</a></li></ul></li></ul><h2 id="1-使用Typora自动添加相对路径的方法"><a href="#1-使用Typora自动添加相对路径的方法" class="headerlink" title="1. 使用Typora自动添加相对路径的方法"></a>1. 使用<code>Typora</code>自动添加<code>相对路径</code>的方法</h2><blockquote><p>优点：图片是直接存放在Github工程，偏于管理、不易丢失</p><p>缺点：占用Github空间，图片存放过多导致仓库爆满</p><p>所以我只利用该方法存放必要的图片（头像、网站搭建所需的图片等），文章中的图片采用图床的方法</p></blockquote><p>1. 在<code>/blog/source/</code> 文件夹下创建<code>images</code>文件夹，用来存放网站中的图片</p><ul><li>为了更好的管理图片，可以在<code>images</code>文件夹下根据相应的文章再创建相应文件夹</li></ul><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A1.png" alt="A1"></p><p>2. 打开<code>Typora</code>，点击<code>文件</code>→<code>偏好设置</code>→<code>图像</code>→<code>优先使用相对路径</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A2.png" alt="A2"></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A3.png" alt="A3"></p><p>3. 把<code>images</code>文件夹下的图片直接复制到用<code>Typora</code>打开的文章中，就可以显示图片</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A4.png" alt="A4"></p><h2 id="2-Github图床-Vercel部署-PicGo上传图片"><a href="#2-Github图床-Vercel部署-PicGo上传图片" class="headerlink" title="2.Github图床+Vercel部署+PicGo上传图片"></a>2.Github图床+Vercel部署+PicGo上传图片</h2><blockquote><p>优点：&#x20;</p><p>​1.存放在个人仓库里，便于管理</p><p>缺点：</p><p>​1.由于访问Github很慢，导致图片加载非常慢</p><p>​2.每个仓库限制1G，超过需要新建仓库</p><p>由于是使用Github，导致访问图片时候非常非常非常慢，所以这种方法适用于少量图片的文章</p></blockquote><ul><li>请自行注册Github账号、Vercel账号</li></ul><h3 id="2-1-建立Github仓库"><a href="#2-1-建立Github仓库" class="headerlink" title="2.1 建立Github仓库"></a>2.1 建立Github仓库</h3><p>1. 进入Github官网注册并登录自己的账号，到自己的个人主页，点击右上角的<code>+</code> ，并选择<code>New Repository</code>创建自己的仓库</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A5.png" alt="A5"></p><p>2.仓库名称、描述可以随意，可见性一定要选<code>public</code>，<code>Readme</code>文件可以创建，然后点击<code>Create Repository</code>创建仓库。</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A6.png" alt="A6"></p><h3 id="2-2-Vercel部署"><a href="#2-2-Vercel部署" class="headerlink" title="2.2 Vercel部署"></a>2.2 Vercel部署</h3><p>1. 首先需要一个Vercel账号，这里<strong>推荐用GitHub账户关联，这样你就可以在Vercel中直接托管你的GitHub库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A7.png" alt="A7"></p><p>2. 当你和Github账号关联并登录后，进入个人主页，点击右上角的<code>Add New Project</code>创建新的项目;这时候你会看见你Github的仓库，然后点击所对应的仓库的<code>Import</code>选项，导入该仓库，最后不用再修改东西，直接点击<code>Deploy</code>即可</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A8.png" alt="A8"></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/A9.png" alt="A9"></p><p>3. 进入该项目控制台后，选择右上角的<code>Domains</code>,然后点击<code>Add Domain</code>添加新的域名，添加一个自己域名的二级域名，然后<strong>在你对应的域名解析控制台添加对应解析</strong>，等待生效。</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B10.png" alt="B10"></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B11.png" alt="B11"></p><p>下面的信息在域名解析时需要用到（具体用法请往下看）</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B12.png" alt="B12"></p><h3 id="2-3-购买阿里云域名，并通过Vercel将域名和Github仓库绑定"><a href="#2-3-购买阿里云域名，并通过Vercel将域名和Github仓库绑定" class="headerlink" title="2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定"></a>2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定</h3><p>1.进入阿里云首页，在搜索框输入<code>域名注册</code> 并搜索，点击进入域名注册页面，然后输入自己想要购买的域名并点击<code>立即查询</code>,根据合适的价格选择购买</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B13.png" alt="B13"></p><p>2. 将域名进行实名认证</p><p>(1)进入阿里云首页点击右上角的<code>控制台</code>，进入控制台界面后点击<code>域名</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B14.png" alt="B14"></p><p>(2)进入域名控制台界面后，点击左边<code>域名列表</code>，然后点击<code>管理</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B15.png" alt="B15"></p><p>(3)进入管理页面后,点击左边<code>域名持有者实名认证</code>，然后根据步骤完成实名认证即可</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B16.png" alt="B16"></p><p>3. 利用<code>Vercel</code>进行<code>域名</code>和<code>Github</code>仓库绑定</p><p>(1)进入域名控制台，点击左边<code>域名列表</code>，然后点击<code>解析</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B17.png" alt="B17"></p><p>(2)进入解析页面，点击<code>添加记录</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B18.png" alt="B18"></p><p>(3)将<code>Vercel界面</code>中的数据填入阿里云的<code>域名解析平台</code>,然后点击确认</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/B19.png" alt="B19"></p><p>(4) 刷新<code>Vercel界面</code>界面，出现下图，表示解析成功</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C20.png" alt="C20"></p><h3 id="2-4-PicGo上传图片"><a href="#2-4-PicGo上传图片" class="headerlink" title="2.4 PicGo上传图片"></a>2.4 PicGo上传图片</h3><p>1.打开软件后，进入<code>PicGo设置</code>界面，只保留<code>Github</code>图床</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C21.png" alt="C21"></p><p>2.点击<code>图床设置</code>→<code>Github</code>然后按照参数输入相关信息</p><ul><li><strong>仓库名</strong>：一定要填写Vercel中绑定的Github仓库</li><li><strong>自定义域名</strong>：一定要填写Vercel中绑定的网址</li></ul><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C22.png" alt="C22"></p><p>3.Token的获取方式</p><p>(1)进入Github个人主页，然后点击<code>右上角头像</code>-&gt;<code>Setting</code>-&gt;<code>左边栏Developer Settings</code>-&gt;<code>左栏Personal access tokens</code>-&gt;<code>左栏tokens(classic)</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C23.png" alt="C23"></p><p>(2)创建Token时，<code>Note</code>随意；<code>Exporation</code>选<code>No expiration</code>;<code>Select scopes</code>必须把<code>repo</code>这一项勾上，其它不需要勾选，然后点击生成就行</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C24.png" alt="C24"></p><p>(3)生成完成后就会出现Token,这时候必须马上复制出现的Token，不然后面就看不到了，复制了填到PicGo的Token选项，随后点击确定保存</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C25.png" alt="C25"></p><p>4.利用PicGo进行图片上传，并验证是否上传成功</p><p>(1)进入Picgo页面，点击上传区，然后随便拖拽一张图片进来，应该就可以上传成功。</p><ul><li>注意：每个仓库大小限制是1G！！！</li></ul><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C26.png" alt="C26"></p><p>(2)进入Github所对应的仓库，查看图片是否已经上传成功</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C27.png" alt="C27"></p><p>(3)进入相册，查看上传的图片，以及复制生成的链接，然后用网页打开，查看是否能正常访问。</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C28.png" alt="C28"></p><h3 id="2-5-PicGo结合Typora使用"><a href="#2-5-PicGo结合Typora使用" class="headerlink" title="2.5 PicGo结合Typora使用"></a>2.5 PicGo结合Typora使用</h3><p>&#x20;(1) 打开<code>Typora</code>，点击<code>文件</code>→<code>偏好设置</code>→<code>图像</code>→<code>上传服务设定</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/C29.png" alt="C29"></p><p>(2) 把图片复制到<code>Typora</code>，然后<code>点击右键</code>，选择<code>上传图片</code>即可（上传成功之后，本地可能不显示，重启Typora软件后即可正常显示）</p><h2 id="3-七牛云图床-PicGo上传图片"><a href="#3-七牛云图床-PicGo上传图片" class="headerlink" title="3.七牛云图床+PicGo上传图片"></a>3.七牛云图床+PicGo上传图片</h2><blockquote><p>优点：&#x20;</p><p>​1.每个月都有免费的10G存储空间、10G的流量、写请求10万次、读请求100万次</p><p>​2.访问速度比Github快的多得多</p><p>缺点：</p><p>​1.需要一个自己的域名，不然七牛云免费提供的域名（免费提供一个月）过期后，批量替换URL工作量会很大</p><p>​2.超出免费的额度会收取费用</p><p>​3.免费额度只能使用HTTP，若使用HTTPS将会收费，但只使用HTTP服务的话，文章里的图片在网页中将打不开（所以还是要充钱）</p><p>七牛云图床适用于刚入门、有自己域名、访问量少的博客使用，如果要花钱才使用的话我还不如选择阿里云</p></blockquote><h3 id="3-1-创建七牛云的存储空间"><a href="#3-1-创建七牛云的存储空间" class="headerlink" title="3.1 创建七牛云的存储空间"></a>3.1 创建七牛云的存储空间</h3><p>(1) 进入七牛云<code>产品主页</code>（若进入的是官网主页，请点击右上角控制台，进入产品主页），进入产品主页后点击<code>左边蓝色方块</code>→<code>对象存储</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D30.png" alt="D30"></p><p>(2) 进入对象存储主页后，点击<code>左边栏空间管理</code>→<code>新建空间</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D31.png" alt="D31"></p><p>存储名称任意，存储区域一定要选择海外的，访问控制选择公开，然后点击确认即可</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D32.png" alt="D32"></p><h3 id="3-2-对七牛云所创建的域名进行解析"><a href="#3-2-对七牛云所创建的域名进行解析" class="headerlink" title="3.2 对七牛云所创建的域名进行解析"></a>3.2 对七牛云所创建的域名进行解析</h3><p>1.在七牛云添加域名</p><p>(1) 进入刚新建的空间，点击<code>左边栏域名管理</code>→<code>绑定域名</code></p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D33.png" alt="D33"></p><p>(2)  按照下面要求填写信息后，点击创建</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D34.png" alt="D34"></p><p>2.将所创建的域名进行解析</p><p>(1) 进入七牛云<code>域名管理界面</code>，点击所创建的域名</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D35.png" alt="D35"></p><p>下面的信息在域名解析时需要用到（具体用法请往下看）</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D36.png" alt="D36"></p><p>(2)进入<code>阿里云</code>的<code>域名解析界面</code>，进行域名绑定（不知道操作的看<code>步骤2.3</code>）</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D37.png" alt="D37"></p><p>(3)  刷新<code>七牛云界面</code>界面，出现下图，表示解析成功</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D38.png" alt="D38"></p><h3 id="3-3-PicGo上传图片"><a href="#3-3-PicGo上传图片" class="headerlink" title="3.3 PicGo上传图片"></a>3.3 PicGo上传图片</h3><p>1.打开<code>PicGo</code>软件后，点击<code>图床设置</code>→<code>七牛云</code>，然后按照参数输入相关信息</p><ul><li><p>图床配置名 ：任意</p></li><li><p>设定AccessKey ：进入<code>七牛云产品主页</code>，点击<code>右上角个人头像</code>→<code>密钥管理</code></p></li><li><p>设定SecretKey ：进入<code>七牛云产品主页</code>，点击<code>右上角个人头像</code>→<code>密钥管理</code></p></li><li><p>设定Bucket ：填<code>空间名称</code>( 我创立的空间名称为hexo-wyh，所以我此处填hexo-wyh ）</p></li><li><p>设定访问网址 ：<code>http:// + 域名</code>，我填的是：<a href="http://qiniu.wyh-love.xyz(注意不要写成https)/">http://qiniu.wyh-love.xyz（注意不要写成https）</a></p></li><li><p>设定存储区域 ：根据创建存储空间时所设置的<code>存储区域</code>填写 (我填的是 as0 )</p><table><thead><tr><th>华东</th><th>华北</th><th>华南</th><th>北美</th><th>东南亚</th></tr></thead><tbody><tr><td>20</td><td>z1</td><td>z2</td><td>na0</td><td>as0</td></tr></tbody></table></li><li><p>设定网址后缀 ：不填就行</p></li><li><p>设定存储路径 ：任意（我填的是hexo&#x2F;text1&#x2F;）</p></li></ul><p>2.利用PicGo进行图片上传，并验证是否上传成功</p><p>(1)进入Picgo页面，点击上传区，然后随便拖拽一张图片进来，应该就可以上传成功。</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/D39.png" alt="D39"></p><p>(2)进入<code>七牛云文件管理界面</code>，查看图片是否已经上传成功</p><p><img src="https://wyh-hexo.oss-cn-shenzhen.aliyuncs.com/hexo/text1/E40.png" alt="E40"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床教程1</title>
      <link href="/Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B1/"/>
      <url>/Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用Typora自动添加相对路径的方法"><a href="#1-使用Typora自动添加相对路径的方法" class="headerlink" title="1. 使用Typora自动添加相对路径的方法"></a>1. 使用<code>Typora</code>自动添加<code>相对路径</code>的方法</h2><blockquote><p>优点：图片是直接存放在Github工程，偏于管理、不易丢失</p><p>缺点：占用Github空间，图片存放过多导致仓库爆满</p><p>所以我只利用该方法存放必要的图片（头像、网站搭建所需的图片等），文章中的图片采用图床的方法</p></blockquote><p>1. 在<code>/blog/source/</code> 文件夹下创建<code>images</code>文件夹，用来存放网站中的图片</p><ul><li>为了更好的管理图片，可以在<code>images</code>文件夹下根据相应的文章再创建相应文件夹</li></ul><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A0.png" alt="A0"></p><p>2. 打开<code>Typora</code>，点击<code>文件</code>→<code>偏好设置</code>→<code>图像</code>→<code>优先使用相对路径</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A1.png" alt="A1"></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A2.png" alt="A2"></p><p>3. 把<code>images</code>文件夹下的图片直接复制到用<code>Typora</code>打开的文章中，本地和网站就都可以显示图片</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A3.png" alt="A3"></p><h2 id="2-图床方法（使用Github-Vercel-PicGo）"><a href="#2-图床方法（使用Github-Vercel-PicGo）" class="headerlink" title="2.图床方法（使用Github+Vercel+PicGo）"></a>2.图床方法（使用Github+Vercel+PicGo）</h2><h4 id="2-1-建立Github仓库"><a href="#2-1-建立Github仓库" class="headerlink" title="2.1 建立Github仓库"></a>2.1 建立Github仓库</h4><p>1. 进入Github官网注册并登录自己的账号，到自己的个人主页，点击右上角的<code>+</code> ，并选择<code>New Repository</code>创建自己的仓库</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A4.png" alt="A4"></p><p>2.仓库名称、描述可以随意，可见性一定要选<code>public</code>，<code>Readme</code>文件可以创建，然后点击<code>Create Repository</code>创建仓库。</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A5.png" alt="A5"></p><h4 id="2-2-Vercel部署"><a href="#2-2-Vercel部署" class="headerlink" title="2.2 Vercel部署"></a>2.2 Vercel部署</h4><p>1. 首先需要一个Vercel账号，<strong>这里推荐用GitHub账户关联，这样你就可以在Vercel中直接托管你的GitHub库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A6.png" alt="A6"></p><p>2. 当你和Github账号关联并登录后，进入个人主页，点击右上角的<code>Add New Project</code>创建新的项目;这时候你会看见你Github的仓库，然后点击所对应的仓库的<code>Import</code>选项，导入该仓库，最后不用再修改东西，直接点击<code>Deploy</code>即可</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A7.png" alt="A7"></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A8.png" alt="A8"></p><p>3. 进入该项目控制台后，选择右上角的<code>Domains</code>,然后点击<code>Add Domain</code>添加新的域名，添加一个自己域名的二级域名，然后<strong>在你对应的域名解析控制台添加对应解析（阿里云中操作）</strong>，等待生效。</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/A9.png" alt="A9"></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B0.png" alt="B0"></p><p>下面的信息在捆绑域名时需要用到（具体用法请往下看）</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B1.png" alt="B1"></p><h4 id="2-3-购买阿里云域名，并通过Vercel将域名和Github仓库绑定"><a href="#2-3-购买阿里云域名，并通过Vercel将域名和Github仓库绑定" class="headerlink" title="2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定"></a>2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定</h4><p>1.进入阿里云首页，在搜索框输入<code>域名注册</code> 并搜索，点击进入域名注册页面，然后输入自己想要购买的域名并点击<code>立即查询</code>,根据合适的价格选择购买</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B2.png" alt="B2"></p><p>2. 将域名进行实名认证</p><p>(1)进入阿里云首页点击右上角的<code>控制台</code>，进入控制台界面后点击<code>域名</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B3.png" alt="B3"></p><p>(2)进入域名控制台界面后，点击左边<code>域名列表</code>，然后点击<code>管理</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B4.png" alt="B4"></p><p>(3)进入管理页面后,点击左边<code>域名持有者实名认证</code>，然后根据步骤完成实名认证即可</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B5.png" alt="B5"></p><p>3. 利用<code>Vercel</code>进行<code>域名</code>和<code>Github</code>仓库绑定</p><p>(1)进入域名控制台，点击左边<code>域名列表</code>，然后点击<code>解析</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B6.png" alt="B6"></p><p>(2)进入解析页面，点击<code>添加记录</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B7.png" alt="B7"></p><p>(3)将<code>Vercel界面</code>中的数据填入阿里云的<code>域名解析平台</code>,然后点击确认</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B8.png" alt="B8"></p><p>(4) 刷新<code>Vercel界面</code>界面，出现下图，表示捆绑成功</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/B9.png" alt="B9"></p><h4 id="2-4-PicGo上传图片"><a href="#2-4-PicGo上传图片" class="headerlink" title="2.4 PicGo上传图片"></a>2.4 PicGo上传图片</h4><ul><li><code>PicGo</code>不要下载最新版本，最新版本有时候不支持插件安装，我使用的版本是<code>V16.20.2</code></li></ul><p>1.打开软件后，进入<code>PicGo设置</code>界面，只保留<code>Github</code>图床</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C0.png" alt="C0"></p><p>2.点击<code>图床设置</code>→<code>Github</code>然后按照参数输入相关信息</p><ul><li><strong>仓库名</strong>：一定要填写Vercel中绑定的Github仓库</li><li><strong>自定义域名</strong>：一定要填写Vercel中绑定的网址</li></ul><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C1.png" alt="C1"></p><p>3.Token的获取方式</p><p>(1)进入Github个人主页，然后点击<code>右上角头像</code>-&gt;<code>Setting</code>-&gt;<code>左边栏Developer Settings</code>-&gt;<code>左边栏Personal access tokens</code>-&gt;<code>左边栏tokens(classic)</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C2.png" alt="C2"></p><p>(2)创建Token时，<code>Note</code>随意；<code>Exporation</code>选<code>No expiration</code>;<code>Select scopes</code>必须把<code>repo</code>这一项勾上，其它不需要勾选，然后点击生成就行</p><p><img src="C:\Users\28466\Desktop\C3.png" alt="C3"></p><p>(3)生成完成后就会出现Token,这时候必须马上复制出现的Token，不然后面就看不到了，复制了填到PicGo的Token选项，随后点击确定保存</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C4.png" alt="C4"></p><p>4.利用PicGo进行图片上传，并验证是否上传成功</p><p>(1)进入Picgo页面，点击上传区，然后随便拖拽一张图片进来，应该就可以上传成功。</p><ul><li>注意：每个仓库大小限制是1G！！！</li></ul><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C5.png" alt="C5"></p><p>(2)进入Github所对应的仓库，查看图片是否已经上传成功</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C6.png" alt="C6"></p><p>(3)进入相册，查看上传的图片，以及复制生成的链接，然后用网页打开，查看是否能正常访问。</p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C7.png" alt="C7"></p><h4 id="2-5-PicGo结合Typora使用"><a href="#2-5-PicGo结合Typora使用" class="headerlink" title="2.5 PicGo结合Typora使用"></a>2.5 PicGo结合Typora使用</h4><p>&#x20;(1) 打开<code>Typora</code>，点击<code>文件</code>→<code>偏好设置</code>→<code>图像</code>→<code>上传服务设定</code></p><p><img src="http://qiniu.wyh-love.xyz/hexo/text1/C8.png" alt="C8"></p><p>(2) 把图片复制到<code>Typora</code>，然后<code>点击右键</code>，选择<code>上传图片 </code>即可（上传成功之后，本地可能不显示，重启Typora软件后即可正常显示）</p><ul><li><strong>如果一切正常，那恭喜你，你已经完成了所有操作</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床教程</title>
      <link href="/Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/"/>
      <url>/Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用Typora自动添加相对路径的方法"><a href="#1-使用Typora自动添加相对路径的方法" class="headerlink" title="1. 使用Typora自动添加相对路径的方法"></a>1. 使用<code>Typora</code>自动添加<code>相对路径</code>的方法</h2><blockquote><p>优点：图片是直接存放在Github工程，偏于管理、不易丢失</p><p>缺点：占用Github空间，图片存放过多导致仓库爆满</p><p>所以我只利用该方法存放必要的图片（头像、网站搭建所需的图片等），文章中的图片采用图床的方法</p></blockquote><p>1. 在<code>/blog/source/</code> 文件夹下创建、<code>images</code>文件夹，用来存放网站中的图片</p><ul><li>为了更好的管理图片可以在<code>images</code>文件夹下，根据相应的文章再创建相应文件夹</li></ul><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA1.png" alt="A1"></p><p>2. 打开<code>Typora</code>，点击<code>文件</code>→<code>偏好设置</code>→<code>图像</code>→<code>优先使用相对路径</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA2.png" alt="A2"></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA3.png" alt="A3"></p><p>3. 把<code>images</code>文件夹下的图片直接复制到用<code>Typora</code>打开的文章中，就可以显示图片</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA4.png" alt="A4"></p><h2 id="2-图床方法（使用Github-Vercel-PicGo）"><a href="#2-图床方法（使用Github-Vercel-PicGo）" class="headerlink" title="2.图床方法（使用Github+Vercel+PicGo）"></a>2.图床方法（使用Github+Vercel+PicGo）</h2><h3 id="2-1-建立Github仓库"><a href="#2-1-建立Github仓库" class="headerlink" title="2.1 建立Github仓库"></a>2.1 建立Github仓库</h3><p>1. 进入Github官网注册并登录自己的账号，到自己的个人主页，点击右上角的<code>+</code> ，并选择<code>New Repository</code>创建自己的仓库</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA5.png" alt="A5"></p><p>2.仓库名称、描述可以随意，可见性一定要选<code>public</code>，<code>Readme</code>文件可以创建，然后点击<code>Create Repository</code>创建仓库。</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA6.png" alt="A6"></p><h3 id="2-2-Vercel部署"><a href="#2-2-Vercel部署" class="headerlink" title="2.2 Vercel部署"></a>2.2 Vercel部署</h3><p>1. 首先需要一个Vercel账号，<strong>这里推荐用GitHub账户关联，这样你就可以在Vercel中直接托管你的GitHub库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA7.png" alt="A7"></p><p>2. 当你和Github账号关联并登录后，进入个人主页，点击右上角的<code>Add New Project</code>创建新的项目;这时候你会看见你Github的仓库，然后点击所对应的仓库的<code>Import</code>选项，导入该仓库，最后不用再修改东西，直接点击<code>Deploy</code>即可</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA8.png" alt="A8"></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA9.png" alt="A9"></p><p>3. 进入该项目控制台后，选择右上角的<code>Domains</code>,然后点击<code>Add Domain</code>添加新的域名，添加一个自己域名的二级域名，然后<strong>在你对应的域名解析控制台添加对应解析</strong>，等待生效。</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA10.png" alt="A10"></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA11.png" alt="A11"></p><p>下面的信息在捆绑域名时需要用到（具体用法请往下看）</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA12.png" alt="A12"></p><h3 id="2-3-购买阿里云域名，并通过Vercel将域名和Github仓库绑定"><a href="#2-3-购买阿里云域名，并通过Vercel将域名和Github仓库绑定" class="headerlink" title="2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定"></a>2.3 购买阿里云域名，并通过Vercel将域名和Github仓库绑定</h3><p>1.进入阿里云首页，在搜索框输入<code>域名注册</code> 并搜索，点击进入域名注册页面，然后输入自己想要购买的域名并点击<code>立即查询</code>,根据合适的价格选择购买</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA13.png" alt="A13"></p><p>2. 将域名进行实名认证</p><p>(1)进入阿里云首页点击右上角的<code>控制台</code>，进入控制台界面后点击<code>域名</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA14.png" alt="A14"></p><p>(2)进入域名控制台界面后，点击左边<code>域名列表</code>，然后点击<code>管理</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA15.png" alt="A15"></p><p>(3)进入管理页面后,点击左边<code>域名持有者实名认证</code>，然后根据步骤完成实名认证即可</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA16.png" alt="A16"></p><p>3. 利用<code>Vercel</code>进行<code>域名</code>和<code>Github</code>仓库绑定</p><p>(1)进入域名控制台，点击左边<code>域名列表</code>，然后点击<code>解析</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA17.png" alt="A17"></p><p>(2)进入解析页面，点击<code>添加记录</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA18.png" alt="A18"></p><p>(3)将<code>Vercel界面</code>中的数据填入阿里云的<code>域名解析平台</code>,然后点击确认</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA19.png" alt="A19"></p><p>(4) 刷新<code>Vercel界面</code>界面，出现下图，表示捆绑成功</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA20.png" alt="A20"></p><h3 id="2-4-PicGo上传图片"><a href="#2-4-PicGo上传图片" class="headerlink" title="2.4 PicGo上传图片"></a>2.4 PicGo上传图片</h3><ul><li><code>PicGo</code>不要下载最新版本，最新版本有时候不支持插件安装，我使用的版本是<code>V16.20.2</code></li></ul><p>1.打开软件后，进入<code>PicGo设置</code>界面，只保留<code>Github</code>图床</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA21.png" alt="A21"></p><p>2.点击<code>图床设置</code>→<code>Github</code>然后按照参数输入相关信息</p><ul><li><strong>仓库名</strong>：一定要填写Vercel中绑定的Github仓库</li><li><strong>自定义域名</strong>：一定要填写Vercel中绑定的网址</li></ul><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA22.png" alt="A22"></p><p>3.Token的获取方式</p><p>(1)进入Github个人主页，然后点击<code>右上角头像</code>-&gt;<code>Setting</code>-&gt;<code>左边栏Developer Settings</code>-&gt;<code>左栏Personal access tokens</code>-&gt;<code>左栏tokens(classic)</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA23.png" alt="A23"></p><p>(2)创建Token时，<code>Note</code>随意；<code>Exporation</code>选<code>No expiration</code>;<code>Select scopes</code>必须把<code>repo</code>这一项勾上，其它不需要勾选，然后点击生成就行</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA24.png" alt="A24"></p><p>(3)生成完成后就会出现Token,这时候必须马上复制出现的Token，不然后面就看不到了，复制了填到PicGo的Token选项，随后点击确定保存</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA25.png" alt="A25"></p><p>4.利用PicGo进行图片上传，并验证是否上传成功</p><p>(1)进入Picgo页面，点击上传区，然后随便拖拽一张图片进来，应该就可以上传成功。</p><ul><li>注意：每个仓库大小限制是1G！！！</li></ul><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA26.png" alt="A26"></p><p>(2)进入Github所对应的仓库，查看图片是否已经上传成功</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA27.png" alt="A27"></p><p>(3)进入相册，查看上传的图片，以及复制生成的链接，然后用网页打开，查看是否能正常访问。</p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA28.png" alt="A28"></p><h3 id="2-5-PicGo结合Typora使用"><a href="#2-5-PicGo结合Typora使用" class="headerlink" title="2.5 PicGo结合Typora使用"></a>2.5 PicGo结合Typora使用</h3><p>&#x20;(1) 打开<code>Typora</code>，点击<code>文件</code>→<code>偏好设置</code>→<code>图像</code>→<code>上传服务设定</code></p><p><img src="https://image.wyh-love.xyz//Hexo/%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8BA29.png" alt="A29"></p><p>(2) 把图片复制到<code>Typora</code>，然后<code>点击右键</code>，选择<code>上传图片</code>即可（上传成功之后，本地可能不显示，重启Typora软件后即可正常显示）</p><ul><li><strong>如果一切正常，那恭喜你，你已经完成了所有操作</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>W5500使用</title>
      <link href="/W5500%E4%BD%BF%E7%94%A8/"/>
      <url>/W5500%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="更新时间：2025-5-19"><a href="#更新时间：2025-5-19" class="headerlink" title="更新时间：2025.5.19"></a>更新时间：2025.5.19</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1.本文介绍使用STM32F103C8T6驱动W5500模块，采用硬件SPI（SPI2）控制W5500；本文介绍的是设置静态IP的方法。</p><p>2.因为对于计算机网络以及W5500模块不了解，这里不介绍知识点，只讲述使用方法。</p><p>3.详细的介绍及使用请参考官网<a href="https://www.w5500.com/w5500.html">w5500.com&#x2F;w5500.html</a></p><h2 id="1-添加驱动文件"><a href="#1-添加驱动文件" class="headerlink" title="1. 添加驱动文件"></a>1. 添加驱动文件</h2><p>添加socket.c、wizchip_conf.c、W5500.c、BSP_W5500.c文件到工程中</p><p><img src="https://secure2.wostatic.cn/static/suJ6EuCcQN7ZjxfyNhAJoo/image.png?auth_key=1750078301-t9ZCzjgMyArXrhHq2XpKwa-0-8d6728558bc76bb286ce270ca1633683" alt="img"></p><h2 id="2-代码解析"><a href="#2-代码解析" class="headerlink" title="2. 代码解析"></a>2. 代码解析</h2><p>socket.c、wizchip_conf.c、W5500.c这三个文件是官方写好的驱动文件这里不做解析，要想了解官方代码的含义，请参考官网介绍，这里主要解析自己写的驱动文件BSP_W5500.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BSP_W5500.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wizchip_conf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化SPI2</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wiz_spi_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">  SPI_InitTypeDef SPI_InitStructure;</span><br><span class="line">  </span><br><span class="line">  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);</span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">  </span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;</span><br><span class="line">  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;</span><br><span class="line">  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;</span><br><span class="line">  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;</span><br><span class="line">  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;</span><br><span class="line">  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;</span><br><span class="line">  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;</span><br><span class="line">  SPI_Init(SPI2, &amp;SPI_InitStructure);</span><br><span class="line">  SPI_Cmd(SPI2, ENABLE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* PB_12 -&gt; CS  这个引脚可以换 */</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = WIZ_SCS_PIN;</span><br><span class="line">  GPIO_Init(WIZ_SCS_PORT, &amp;GPIO_InitStructure);</span><br><span class="line">  GPIO_SetBits(WIZ_SCS_PORT, WIZ_SCS_PIN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化RST、INT引脚</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wiz_rst_int_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</span><br><span class="line">    <span class="comment">/* PB_10 -&gt; RST */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = WIZ_RST_PIN;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(WIZ_RST_PORT, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_SetBits(WIZ_RST_PORT, WIZ_RST_PIN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* PB_11 -&gt; INT */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = WIZ_INT_PIN;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">    GPIO_Init(WIZ_INT_PORT, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*网关地址和板子IP地址在main.c中定义 */</span></span><br><span class="line"><span class="keyword">extern</span>  <span class="type">uint8_t</span>  Gateway_ip[<span class="number">4</span>];                    <span class="comment">/*网关地址*/</span></span><br><span class="line"><span class="keyword">extern</span>  <span class="type">uint8_t</span>  local_ip[<span class="number">4</span>];                      <span class="comment">/*板子IP地址*/</span> </span><br><span class="line">wiz_NetInfo gWIZNETINFO = &#123; .mac = &#123;<span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0x68</span>, <span class="number">0x88</span>, <span class="number">0x56</span>, <span class="number">0x72</span>&#125;,</span><br><span class="line">                            .ip =  &#123;<span class="number">0</span>&#125;,  <span class="comment">/* 板子IP地址 */</span> </span><br><span class="line">                            .sn =  &#123;<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                            .gw =  &#123;<span class="number">0</span>&#125;,    <span class="comment">/* 网关 */</span></span><br><span class="line">                            .dns = &#123;<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>&#125;,</span><br><span class="line">                            .dhcp = NETINFO_STATIC&#125;;    <span class="comment">//静态IP地址模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//CS(片选)引脚拉低</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SPI_CS_Select</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    W5500_CS_L;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//CS(片选)引脚拉高 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SPI_CS_Deselect</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    W5500_CS_H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述 ： 向W5500写入1字节数据</span></span><br><span class="line"><span class="comment"> * 参数 ： TxData:要写入的数据</span></span><br><span class="line"><span class="comment"> * 返回 ： 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wizchip_write_byte</span><span class="params">(<span class="type">uint8_t</span> TxData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    SPI_I2S_SendData(SPI2, TxData);</span><br><span class="line">    <span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    SPI_I2S_ReceiveData(SPI2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述 ： 从W5500读出1字节数据</span></span><br><span class="line"><span class="comment"> * 参数 ： 无</span></span><br><span class="line"><span class="comment"> * 返回 ： 读出的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">wizchip_read_byte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    SPI_I2S_SendData(SPI2, <span class="number">0xffff</span>);</span><br><span class="line">    <span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SPI_I2S_ReceiveData(SPI2);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述 ： 向W5500写入len长度的数据</span></span><br><span class="line"><span class="comment"> * 参数 ： buf-&gt;要写入的数据</span></span><br><span class="line"><span class="comment"> * 参数 ： len-&gt;要写入的长度</span></span><br><span class="line"><span class="comment"> * 返回 ： 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wizchip_write_buff</span><span class="params">(<span class="type">uint8_t</span> *buf, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; len; idx++)</span><br><span class="line">    &#123;</span><br><span class="line">        wizchip_write_byte(buf[idx]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述 ： 从W5500读出len长度的数据</span></span><br><span class="line"><span class="comment"> * 参数 ： buf-&gt;存放读出的数据</span></span><br><span class="line"><span class="comment"> * 参数 ： buf-&gt;要读出的长度</span></span><br><span class="line"><span class="comment"> * 返回 ： 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wizchip_read_buff</span><span class="params">(<span class="type">uint8_t</span> *buf, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; len; idx++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[idx] = wizchip_read_byte();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 描述 ：  打印以太网链路的参数（传输速度、模式）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wiz_print_phy_info</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> get_phy_conf;</span><br><span class="line">    get_phy_conf = getPHYCFGR();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The current Mbtis speed : %dMbps\r\n&quot;</span>, get_phy_conf &amp; <span class="number">0x02</span> ? <span class="number">100</span> : <span class="number">10</span>);                  <span class="comment">//打印传输速度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The current Duplex Mode : %s\r\n&quot;</span>, get_phy_conf &amp; <span class="number">0x04</span> ? <span class="string">&quot;Full-Duplex&quot;</span> : <span class="string">&quot;Half-Duplex&quot;</span>);<span class="comment">//打印工作模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述 ： 打印当前参数配置（MAC、IP等信息）</span></span><br><span class="line"><span class="comment"> * 参数 ： 无</span></span><br><span class="line"><span class="comment"> * 返回 ： 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_network_information</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    wiz_NetInfo net_info;</span><br><span class="line">    wizchip_getnetinfo(&amp;net_info); <span class="comment">// 获取当前参数配置（MAC、IP等信息）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断是静态IP还是动态IP */</span></span><br><span class="line">    <span class="keyword">if</span> (net_info.dhcp == NETINFO_DHCP)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;====================================================================================================\r\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %s network configuration : DHCP\r\n\r\n&quot;</span>, _WIZCHIP_ID_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;====================================================================================================\r\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %s network configuration : static\r\n\r\n&quot;</span>, _WIZCHIP_ID_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; MAC         : %02X:%02X:%02X:%02X:%02X:%02X\r\n&quot;</span>, net_info.mac[<span class="number">0</span>], net_info.mac[<span class="number">1</span>], net_info.mac[<span class="number">2</span>], net_info.mac[<span class="number">3</span>], net_info.mac[<span class="number">4</span>], net_info.mac[<span class="number">5</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; IP          : %d.%d.%d.%d\r\n&quot;</span>, net_info.ip[<span class="number">0</span>], net_info.ip[<span class="number">1</span>], net_info.ip[<span class="number">2</span>], net_info.ip[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; Subnet Mask : %d.%d.%d.%d\r\n&quot;</span>, net_info.sn[<span class="number">0</span>], net_info.sn[<span class="number">1</span>], net_info.sn[<span class="number">2</span>], net_info.sn[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; Gateway     : %d.%d.%d.%d\r\n&quot;</span>, net_info.gw[<span class="number">0</span>], net_info.gw[<span class="number">1</span>], net_info.gw[<span class="number">2</span>], net_info.gw[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; DNS         : %d.%d.%d.%d\r\n&quot;</span>, net_info.dns[<span class="number">0</span>], net_info.dns[<span class="number">1</span>], net_info.dns[<span class="number">2</span>], net_info.dns[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;====================================================================================================\r\n\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//W5500芯片复位</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">W5500_RESET</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    W5500_REST_L;</span><br><span class="line">    delay_ms(<span class="number">50</span>);</span><br><span class="line">    W5500_REST_H;</span><br><span class="line">    delay_ms(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册SPI函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wizchip_spi_cb_reg</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    reg_wizchip_cs_cbfunc(SPI_CS_Select, SPI_CS_Deselect);              <span class="comment">//注册SPI片选函数</span></span><br><span class="line">    reg_wizchip_spi_cbfunc(wizchip_read_byte, wizchip_write_byte);      <span class="comment">//注册SPI一个字节读写函数</span></span><br><span class="line">    reg_wizchip_spiburst_cbfunc(wizchip_read_buff, wizchip_write_buff);  <span class="comment">//注册SPI多字节读写函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 描述 : 建立太网链路并检测</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wiz_phy_link_check</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> phy_link_status;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        delay_ms(<span class="number">1000</span>);</span><br><span class="line">        ctlwizchip(CW_GET_PHYLINK, (<span class="type">void</span> *)&amp;phy_link_status);</span><br><span class="line">        <span class="keyword">if</span> (phy_link_status == PHY_LINK_ON)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PHY link\r\n&quot;</span>);</span><br><span class="line">            wiz_print_phy_info();  <span class="comment">//建立链路后打印链路信息</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PHY no link\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (phy_link_status == PHY_LINK_OFF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//W5500初始化以及设置网络参数（MAC、IP等）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">W5500_ChipInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  wizchip_spi_cb_reg();    <span class="comment">//注册SPI函数</span></span><br><span class="line">  W5500_RESET();          <span class="comment">//复位芯片</span></span><br><span class="line">  wiz_phy_link_check();                  <span class="comment">//建立太网链路并检测</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memcpy</span>(gWIZNETINFO.ip,local_ip,<span class="keyword">sizeof</span>(local_ip));      <span class="comment">//本地IP地址设置拷贝</span></span><br><span class="line">  <span class="built_in">memcpy</span>(gWIZNETINFO.gw,Gateway_ip,<span class="keyword">sizeof</span>(Gateway_ip));  <span class="comment">//网关地址设置拷贝</span></span><br><span class="line">  </span><br><span class="line">  wizchip_setnetinfo(&amp;gWIZNETINFO);     <span class="comment">//初始化网络参数配置 MAC 静态IP配置等</span></span><br><span class="line">  print_network_information();          <span class="comment">//打印初始化后的参数配置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __BSP_W5500_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __BSP_W5500_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W5500_REST_L  GPIO_ResetBits(WIZ_RST_PORT,WIZ_RST_PIN);   <span class="comment">//复位引脚拉低</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W5500_REST_H  GPIO_SetBits(WIZ_RST_PORT,WIZ_RST_PIN);     <span class="comment">//复位引脚拉高</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W5500_CS_L  GPIO_ResetBits(WIZ_SCS_PORT,WIZ_SCS_PIN);     <span class="comment">//片选引脚拉低</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W5500_CS_H  GPIO_SetBits(WIZ_SCS_PORT,WIZ_SCS_PIN);       <span class="comment">//片选引脚拉高</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_RST_PIN   GPIO_Pin_10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_RST_PORT   GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_INT_PIN   GPIO_Pin_11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_INT_PORT   GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_SCS_PIN   GPIO_Pin_12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_SCS_PORT   GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_SCK_PIN    GPIO_Pin_13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_SCK_PORT   GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_MISO_PIN   GPIO_Pin_14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_MISO_PORT GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_MOSI_PIN   GPIO_Pin_15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIZ_MOSI_PORT GPIOB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wiz_spi_init</span><span class="params">(<span class="type">void</span>)</span>;  </span><br><span class="line"><span class="type">void</span> <span class="title function_">wiz_rst_int_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">W5500_ChipInit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************************</span></span><br><span class="line"><span class="comment">wizchip_SCS    ---&gt;     STM32_GPIOB12</span></span><br><span class="line"><span class="comment">wizchip_SCLK   ---&gt;     STM32_GPIOB13</span></span><br><span class="line"><span class="comment">wizchip_MISO   ---&gt;     STM32_GPIOB14</span></span><br><span class="line"><span class="comment">wizchip_MOSI   ---&gt;     STM32_GPIOB15</span></span><br><span class="line"><span class="comment">wizchip_RESET   ---&gt;     STM32_GPIOB10</span></span><br><span class="line"><span class="comment">wizchip_INT    ---&gt;     STM32_GPIOB11</span></span><br><span class="line"><span class="comment">**********************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_TCPC             1   <span class="comment">/*Socket 端口选择， W5500一共8个端口:0-7 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Net_Status;  <span class="comment">//存放socket的状态</span></span><br><span class="line"><span class="type">uint8_t</span> W5500_RevBuf[<span class="number">1024</span>];    <span class="comment">//W5500接收缓存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*远端IP地址（电脑IP地址）*/</span></span><br><span class="line"><span class="type">uint8_t</span>  remote_ip[<span class="number">4</span>] = &#123;<span class="number">192</span>,<span class="number">168</span>,<span class="number">1</span>,<span class="number">15</span>&#125;;  </span><br><span class="line"><span class="comment">/*远端端口（电脑端口）*/</span> </span><br><span class="line"><span class="type">uint16_t</span> remote_port = <span class="number">8888</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*网关地址*/</span></span><br><span class="line"><span class="type">uint8_t</span>  Gateway_ip[<span class="number">4</span>] = &#123;<span class="number">192</span>,<span class="number">168</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*本地IP（板子IP地址）*/</span> </span><br><span class="line"><span class="type">uint8_t</span>  local_ip[<span class="number">4</span>] = &#123;<span class="number">192</span>,<span class="number">168</span>,<span class="number">1</span>,<span class="number">16</span>&#125;;</span><br><span class="line"><span class="comment">/*本地端口（板子端口）*/</span></span><br><span class="line"><span class="type">uint16_t</span> local_port = <span class="number">8899</span>;    </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//设置中断优先级分组为组2：2位抢占优先级，2位响应优先级</span></span><br><span class="line">  delay_init();</span><br><span class="line">  delay_ms(<span class="number">1000</span>);</span><br><span class="line">  delay_ms(<span class="number">1000</span>);</span><br><span class="line">  delay_ms(<span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">  LED_init();    <span class="comment">//LED初始化</span></span><br><span class="line">  uart1_init(<span class="number">115200</span>);    <span class="comment">//串口1 用来打印参数信息</span></span><br><span class="line">  </span><br><span class="line">  wiz_spi_init();        <span class="comment">//SPI2初始化</span></span><br><span class="line">  wiz_rst_int_init();    <span class="comment">//初始化RST、INT引脚</span></span><br><span class="line">  W5500_ChipInit();  <span class="comment">//W5500初始化</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint16_t</span> Len;</span><br><span class="line"></span><br><span class="line">    Net_Status = getSn_SR(SOCK_TCPC);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">switch</span>(Net_Status)                  <span class="comment">/*获取socket的状态*/</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> SOCK_CLOSED:                   <span class="comment">/*socket处于关闭状态*/</span></span><br><span class="line">          socket(SOCK_TCPC,Sn_MR_TCP,local_port,Sn_MR_ND);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SOCK_INIT:                      <span class="comment">/*socket处于初始化状态*/</span></span><br><span class="line">          connect(SOCK_TCPC,remote_ip,remote_port);<span class="comment">/*socket连接服务器*/</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SOCK_ESTABLISHED:               <span class="comment">/*socket处于连接建立状态*/</span></span><br><span class="line">          <span class="keyword">if</span>(getSn_IR(SOCK_TCPC) &amp; Sn_IR_CON) </span><br><span class="line">          &#123;</span><br><span class="line">              setSn_IR(SOCK_TCPC, Sn_IR_CON);      <span class="comment">/*清除接收中断标志位*/</span></span><br><span class="line">          &#125;</span><br><span class="line">          Len=getSn_RX_RSR(SOCK_TCPC);            <span class="comment">/*获取接收的数据长度*/</span></span><br><span class="line">          <span class="keyword">if</span>(Len&gt;<span class="number">0</span>)  <span class="comment">//接收到数据</span></span><br><span class="line">          &#123;</span><br><span class="line">              recv(SOCK_TCPC,W5500_RevBuf,Len);     <span class="comment">/*接收来自Server的数据*/</span></span><br><span class="line">              send(SOCK_TCPC,W5500_RevBuf,Len);    <span class="comment">//返回给服务器</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,W5500_RevBuf);</span><br><span class="line">          &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SOCK_CLOSE_WAIT:        <span class="comment">/*socket处于等待关闭状态*/</span></span><br><span class="line">          close(SOCK_TCPC);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-电脑IP设置"><a href="#4-电脑IP设置" class="headerlink" title="4.电脑IP设置"></a>4.电脑IP设置</h2><p>因为步骤3中定义的电脑IP是固定的，所以必须把实际电脑IP设置成和步骤3中一样</p><blockquote><p>&#x2F;<em>远端IP地址（电脑IP地址）</em>&#x2F; uint8_t  remote_ip[4] &#x3D; {192,168,1,15};</p></blockquote><p>操作下面步骤时候要把硬件通过网线连接到电脑</p><p>(1)搜索<strong>查看网络连接</strong>并点击</p><p><img src="https://secure2.wostatic.cn/static/2fgFH4SMLxgCFz9XG5LZ6u/image.png?auth_key=1750078301-o2haBPusznVoPmrs5pTP1A-0-db9d8bc47c2762039b47a7363bd1f853" alt="img"></p><p>（2）右键点击属性</p><p><img src="https://secure2.wostatic.cn/static/eZzRX9AULR8mZJ7sdj7GF5/image.png?auth_key=1750078301-oF4AUVbdAJVYFmsS1mnZfn-0-96f997fdeec512d867beece9180acdfc" alt="img"></p><p>(3)双击<strong>协议版本4</strong></p><p><img src="https://secure2.wostatic.cn/static/pVqgy8N6u9H7D1CkfyssQC/image.png?auth_key=1750078301-whxwUmSdF7o4ZNsXbyCZNm-0-290f1419621d50f994c6f2532580c06d" alt="img"></p><p>（4）输入代码中定义的电脑IP地址、子网掩码、网关</p><p><img src="https://secure2.wostatic.cn/static/ektihXWwPhcpCtoCX87Uwf/image.png?auth_key=1750078301-7rTzoyYFF5tMKbuxoXEVTy-0-17be7ab75c335ec2c5ac788ca1ad9251" alt="img"></p><p>（5）打开命令终端（按下<em>Windows</em>键和<em>R</em>键打开运行窗口，输入<em>cmd</em>并回车）并输入<strong>ipconfig</strong>查看配置是否成功</p><p><img src="https://secure2.wostatic.cn/static/kDyF7kKZCoSTUcDmBahWye/image.png?auth_key=1750078301-4oLKdg4dM8vAEV5CsqFEb8-0-b25c04ee3e89cdf08783edd687628561" alt="img"></p><h2 id="5-验证通信是否成功"><a href="#5-验证通信是否成功" class="headerlink" title="5.验证通信是否成功"></a>5.验证通信是否成功</h2><p>(1)利用ping指令ping一下板子IP（每个人设置的可能不一样)</p><p><img src="https://secure2.wostatic.cn/static/3B8LpocTqJ7CjJD1R7Dtzu/image.png?auth_key=1750078301-aHhBTaAFTGGw6PtVfecBZG-0-2afbe94092331b22b341b82fa3556e00" alt="img"></p><p>(2)打开串口调试助手并输入相关参数（注意本地IP和远端不要搞反）</p><p><img src="https://secure2.wostatic.cn/static/hjTEKEZn2eiuCBT3BCn1qH/image.png?auth_key=1750078301-e3jnPNmZng6rvFn1aYojhS-0-ad2eff2b121075b30eb2d5203d337aea" alt="img"></p><p>（3）建立连接后，发送数据看是否能收发</p><p><img src="https://secure2.wostatic.cn/static/scxfqmvyLwdVsFdTQCz8ca/image.png?auth_key=1750078301-ehEafdhCVYiG7EgzQYPfoT-0-25e6686d70f203b0db89625aa73495a1" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码中只实现了数据的接收和发送，要想进行数据解析请自己编写代码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
